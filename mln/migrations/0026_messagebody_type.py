# Generated by Django 3.2.7 on 2021-10-06 19:17

from django.db import migrations, models
from django.db.models import Q
import mln.models.static

def wrap(query): return query.exists(), query.first()
def by_category(categories): return lambda msg: (msg.category.name in categories, msg)

USER_CATEGORIES = {"General", "Trading", "Bragging", "Praise", "Building", "Thank You", "Click Requests", "Apologies", "Module Requests", "For Networkers"}

def add_message_body_type(apps, schema_editor):
	# Adds MessageBodyTypes to MessageBodies, if it can
	MessageBody = apps.get_model("mln", 'MessageBody')
	MessageBodyType = mln.models.static.MessageBodyType
	NetworkerFriendshipCondition = apps.get_model("mln", "NetworkerFriendshipCondition")
	NetworkerReply = apps.get_model("mln", "NetworkerReply")

	# Maps types to a function that returns both if the message is of the type and which objects prove it
	POSSIBLE_TYPES = {
		MessageBodyType.USER: by_category(USER_CATEGORIES),
		MessageBodyType.SYSTEM: by_category(["User message"]),
		MessageBodyType.BETA: by_category(["Campaign messages (hidden)"]),
		MessageBodyType.FRIEND: lambda msg: wrap(NetworkerFriendshipCondition.objects.filter(Q(success_body=msg) | Q(failure_body=msg))),
		MessageBodyType.REPLY: lambda msg: wrap(NetworkerReply.objects.filter(template__body=msg)),
	}

	for message_body in MessageBody.objects.all():
		if message_body.type is not None: continue
		# Determine which types this object can be
		types = []
		objects = []
		for type_, test in POSSIBLE_TYPES.items(): 
			result, object_ = test(message_body)
			if result: 
				types.append(type_)
				objects.append(object_)

		# Save the message type or note
		if len(types) == 0: continue  # couldn't determine
		elif len(types) == 1: 
			message_body.type = types [0]
		else:
			message_body.notes = "Has corresponding entries in categories: %s.\n\nHandler objects:\n%s" % (", ".join(map(str, types)), "\n".join(map(str, objects)))
		message_body.save()

class Migration(migrations.Migration):
	dependencies = [
		('mln', '0025_alter_networkermessagetriggerlegacy_updated'),
	]

	operations = [
		migrations.AddField(
			model_name='messagebody',
			name='type',
			field=mln.models.static.EnumField(mln.models.static.MessageBodyType, null=True, blank=True),
		),
		migrations.AddField(
			model_name='messagebody',
			name='notes',
			field=models.TextField(default='', blank=True),
		),
		migrations.RunPython(add_message_body_type, reverse_code=migrations.RunPython.noop),
		migrations.AlterField(
			model_name='messagebody',
			name='easy_replies',
			field=models.ManyToManyField(blank=True, related_name='_mln_messagebody_easy_replies_+', to='mln.MessageBody'),
		),
	]
